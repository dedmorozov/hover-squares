{"version":3,"sources":["components/Header/Header.jsx","components/Field/Field.jsx","api/api.js","App.jsx","index.jsx"],"names":["Header","modesList","handleStart","isStarted","onChangeSelect","isModeSelected","easyMode","normalMode","hardMode","className","onChange","hidden","value","field","type","onClick","disabled","defaultProps","Field","squaresCount","setIsColored","getSquares","squaresAmount","squares","i","push","squareStyle","width","height","handleHover","e","style","target","console","log","parentElement","rowIndex","cellIndex","background","map","row","col","onMouseOver","onFocus","loadModes","a","fetch","respone","json","App","useState","setModesList","setIsStarted","isLoaded","setIsLoaded","isColored","setSquaresCount","setIsModeSelected","useEffect","modes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAMaA,G,MAAS,SAAC,GAMhB,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQC,EAAmCL,EAAnCK,SAAUC,EAAyBN,EAAzBM,WAAYC,EAAaP,EAAbO,SAE9B,OACE,sBAAKC,UAAU,qBAAf,UACE,yBAAQA,UAAU,iBAAiBC,SAAUN,EAA7C,UACE,wBAAQO,QAAM,EAAd,uBACA,wBAAQC,MAAON,EAASO,MAAxB,uBAGA,wBAAQD,MAAOL,EAAWM,MAA1B,yBAGA,wBAAQD,MAAOJ,EAASK,MAAxB,0BAKF,wBACEJ,UAAU,iBACVK,KAAK,SACLC,QAASb,EACTc,UAAWX,GAAkBF,EAJ/B,SAMIE,EAAkCF,EAAsB,WAAV,QAA7B,qBAc3BH,EAAOiB,aAAe,CACpBhB,UAAW,I,UC9CAiB,EAAQ,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC9BC,EAAa,SAACC,GAGlB,IAFA,IAAMC,EAAU,GAEPC,EAAI,EAAGA,GAAKF,EAAeE,GAAK,EACvCD,EAAQE,KAAKD,GAGf,OAAOD,GAGHG,EAAc,CAClBC,MAAM,eAAD,OAAiBR,EAAjB,KACLS,OAAO,gBAAD,OAAkBT,EAAlB,MAGFU,EAAc,SAACC,GAAO,IAClBC,EAAUD,EAAEE,OAAZD,MAERE,QAAQC,IAAR,cACSJ,EAAEE,OAAOG,cAAcC,SAAW,GAD3C,cAESN,EAAEE,OAAOK,UAAY,IAE9BjB,GAAa,GACbW,EAAMO,WAAkC,KAArBP,EAAMO,WAAoB,OAAS,IAGxD,OACE,mCACE,uBAAO7B,UAAU,mBAAjB,SACE,gCACGY,EAAWF,GAAcoB,KAAI,SAAAC,GAAG,OAC/B,6BACGnB,EAAWF,GAAcoB,KAAI,SAAAE,GAAG,OAC/B,oBAEEhC,UAAU,gBACVsB,MAAOL,EACPgB,YAAab,EACbc,QAASd,EALX,SAOG,KAPH,UACUW,EADV,aACkBC,QAHbD,aCnCRI,EAAS,uCAAG,4BAAAC,EAAA,sEACDC,MAHR,mCAES,cACjBC,EADiB,yBAGhBA,EAAQC,QAHQ,2CAAH,qDCITC,G,MAAM,WAAO,IAAD,EACWC,mBAAS,IADpB,mBAChBjD,EADgB,KACLkD,EADK,OAEWD,oBAAS,GAFpB,mBAEhB/C,EAFgB,KAELiD,EAFK,OAGSF,oBAAS,GAHlB,mBAGhBG,EAHgB,KAGNC,EAHM,OAIWJ,oBAAS,GAJpB,mBAIhBK,EAJgB,KAILnC,EAJK,OAKiB8B,mBAAS,GAL1B,mBAKhB/B,EALgB,KAKFqC,EALE,OAMqBN,oBAAS,GAN9B,mBAMhB7C,EANgB,KAMAoD,EANA,KAQvBC,oBAAS,sBAAC,4BAAAb,EAAA,sEACYD,IADZ,OACFe,EADE,OAGRR,EAAaQ,GACbL,GAAaD,GAJL,2CAKP,IAcH,OACE,qBAAK5C,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACG4C,EACC,qCACE,cAAC,EAAD,CACEpD,UAAWA,EACXC,YAnBQ,WAClBkD,GAAa,IAmBHjD,UAAWA,EACXC,eAjBW,SAAC0B,GAAO,IACrBlB,EAAUkB,EAAEE,OAAZpB,MAER6C,GAAkB,GAClBrC,GAAa,GACboC,GAAiB5C,IAaPP,eAAgBA,IAEjBF,GAEG,cAAC,EAAD,CACEgB,aAAcA,EACdoC,UAAWA,EACXnC,aAAcA,OAKpB,mBAAGX,UAAU,eAAb,8BClDZmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.24e5151e.chunk.js","sourcesContent":["/* eslint-disable no-nested-ternary */\n/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.scss';\n\nexport const Header = ({\n  modesList,\n  handleStart,\n  isStarted,\n  onChangeSelect,\n  isModeSelected,\n}) => {\n  const { easyMode, normalMode, hardMode } = modesList;\n\n  return (\n    <div className=\"App__header header\">\n      <select className=\"header__select\" onChange={onChangeSelect}>\n        <option hidden>Pick mode</option>\n        <option value={easyMode.field}>\n          Easy mode\n        </option>\n        <option value={normalMode.field}>\n          Normal mode\n        </option>\n        <option value={hardMode.field}>\n          Hard mode\n        </option>\n      </select>\n\n      <button\n        className=\"header__button\"\n        type=\"button\"\n        onClick={handleStart}\n        disabled={!isModeSelected || isStarted}\n      >\n        {!isModeSelected ? 'Choose mode' : !isStarted ? 'Start' : 'Have fun'}\n      </button>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  modesList: PropTypes.objectOf(PropTypes.object),\n  handleStart: PropTypes.func.isRequired,\n  isStarted: PropTypes.bool.isRequired,\n  onChangeSelect: PropTypes.func.isRequired,\n  isModeSelected: PropTypes.bool.isRequired,\n};\n\nHeader.defaultProps = {\n  modesList: {},\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Field.scss';\n\nexport const Field = ({ squaresCount, setIsColored }) => {\n  const getSquares = (squaresAmount) => {\n    const squares = [];\n\n    for (let i = 1; i <= squaresAmount; i += 1) {\n      squares.push(i);\n    }\n\n    return squares;\n  };\n\n  const squareStyle = {\n    width: `calc(100% / ${squaresCount})`,\n    height: `calc(400px / ${squaresCount})`,\n  };\n\n  const handleHover = (e) => {\n    const { style } = e.target;\n\n    console.log(\n      `row ${e.target.parentElement.rowIndex + 1}`,\n      `col ${e.target.cellIndex + 1}`,\n    );\n    setIsColored(true);\n    style.background = style.background === '' ? 'blue' : '';\n  };\n\n  return (\n    <>\n      <table className=\"App__Field Field\">\n        <tbody>\n          {getSquares(squaresCount).map(row => (\n            <tr key={row}>\n              {getSquares(squaresCount).map(col => (\n                <td\n                  key={`${row}, ${col}`}\n                  className=\"Field__square\"\n                  style={squareStyle}\n                  onMouseOver={handleHover}\n                  onFocus={handleHover}\n                >\n                  {' '}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nField.propTypes = {\n  squaresCount: PropTypes.number.isRequired,\n  setIsColored: PropTypes.func.isRequired,\n};\n","const API_URL = 'http://demo1030918.mockable.io/';\n\nexport const loadModes = async() => {\n  const respone = await fetch(API_URL);\n\n  return respone.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport { Header } from './components/Header/Header';\nimport { Field } from './components/Field/Field';\nimport { loadModes } from './api/api';\nimport './App.scss';\n\nexport const App = () => {\n  const [modesList, setModesList] = useState({});\n  const [isStarted, setIsStarted] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isColored, setIsColored] = useState(false);\n  const [squaresCount, setSquaresCount] = useState(0);\n  const [isModeSelected, setIsModeSelected] = useState(false);\n\n  useEffect(async() => {\n    const modes = await loadModes();\n\n    setModesList(modes);\n    setIsLoaded(!isLoaded);\n  }, []);\n\n  const handleStart = () => {\n    setIsStarted(true);\n  };\n\n  const onChangeSelect = (e) => {\n    const { value } = e.target;\n\n    setIsModeSelected(true);\n    setIsColored(false);\n    setSquaresCount(+value);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"App\">\n        {isLoaded ? (\n          <>\n            <Header\n              modesList={modesList}\n              handleStart={handleStart}\n              isStarted={isStarted}\n              onChangeSelect={onChangeSelect}\n              isModeSelected={isModeSelected}\n            />\n            {isStarted\n              && (\n                <Field\n                  squaresCount={squaresCount}\n                  isColored={isColored}\n                  setIsColored={setIsColored}\n                />\n              )}\n          </>\n        )\n          : <p className=\"App__loading\">Loading...</p>\n        }\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}